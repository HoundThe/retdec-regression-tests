from regression_tests import *

class busybox(Test):

	settings = TestSettings(
		input='busybox',
		args='-k'
	)

	def test_for_some_functions(self):
		assert self.out_c.has_func( '_init' )
		assert self.out_c.has_func( 'common_exit' )
		assert self.out_c.has_func( 'del_line_matching' )
		assert self.out_c.has_func( 'chomp' )
		assert self.out_c.has_func( 'bb_parse_mode' )
		assert self.out_c.has_func( 'bb_printf' )
		assert self.out_c.has_func( 'cmsMsg_receive' )
		assert self.out_c.has_func( 'cmsMsg_send' )
		assert self.out_c.has_func( '__deregister_frame_info' )

	def test_check_for_all_currently_detected_strings(self):
		assert self.out_c.has_string_literal( '                %s addr:%s ' )
		assert self.out_c.has_string_literal( ' (expecting %s)' )
		assert self.out_c.has_string_literal( ' Bcast:%s ' )
		assert self.out_c.has_string_literal( ' Mask:%s\\n' )
		assert self.out_c.has_string_literal( ' P-t-P:%s ' )
		assert self.out_c.has_string_literal( ' \\t\\n' )
		#assert self.out_c.has_string_literal( ' is a %sshell builtin' )
		#assert self.out_c.has_string_literal( ' is%s %s' )
		assert self.out_c.has_string_literal( '!=' )
		assert self.out_c.has_string_literal( '%*[^\\n]\\n' )
		#assert self.out_c.has_string_literal( '%-15.15s Link encap:%s  ' )
		#assert self.out_c.has_string_literal( '%-16s%s\\n' )
		#assert self.out_c.has_string_literal( '%-20s ' )
		assert self.out_c.has_string_literal( '%.*s: %s%s' )
		assert self.out_c.has_string_literal( '%.*s: bad variable name' )
		assert self.out_c.has_string_literal( '%.*s: is read only' )
		#assert self.out_c.has_string_literal( '%.4o\\n' )
		#assert self.out_c.has_string_literal( '%02X-' )
		assert self.out_c.has_string_literal( '%02X:%02X:%02X:%02X:%02X:%02X' )
		#assert self.out_c.has_string_literal( '%2d' )
		#assert self.out_c.has_string_literal( '%2d%2d%2d%2d%d' )
		assert self.out_c.has_string_literal( '%2d) %-16s' )
		#assert self.out_c.has_string_literal( '%4s%4s%4s%4s%4s%4s%4s%4s %02x %02x %02x %02x %20s\\n' )
		#assert self.out_c.has_string_literal( '%63s%lx%lx%X%d%d%d%lx%d%d%d\\n' )
		#assert self.out_c.has_string_literal( '%Y.%m.%d-%H:%M:%S' )
		#assert self.out_c.has_string_literal( '%c%s' )
		assert self.out_c.has_string_literal( '%d' )
		#assert self.out_c.has_string_literal( '%d.%d-%d:%d' )
		#assert self.out_c.has_string_literal( '%d.%d-%d:%d:%d' )
		#assert self.out_c.has_string_literal( '%d.%d.%d-%d:%d' )
		#assert self.out_c.has_string_literal( '%d.%d.%d-%d:%d:%d' )
		assert self.out_c.has_string_literal( '%d: %m' )
		#assert self.out_c.has_string_literal( '%d:%d' )
		#assert self.out_c.has_string_literal( '%d:%d:%d' )
		assert self.out_c.has_string_literal( '%ld duplicates, ' )
		assert self.out_c.has_string_literal( '%ld packets received, ' )
		assert self.out_c.has_string_literal( '%ld packets transmitted, ' )
		#assert self.out_c.has_string_literal( '%ldm%ld.%.3lds%c' )
		#assert self.out_c.has_string_literal( '%lld' )
		#assert self.out_c.has_string_literal( '%lld\\n' )
		assert self.out_c.has_string_literal( '%s' )
		assert self.out_c.has_string_literal( '%s %s %s %s %3i\\n' )
		assert self.out_c.has_string_literal( '%s unexpected' )
		assert self.out_c.has_string_literal( '%s%c' )
		assert self.out_c.has_string_literal( '%s%s\\n' )
		assert self.out_c.has_string_literal( '%s%s\\r\\n' )
		assert self.out_c.has_string_literal( '%s: ' )
		#assert self.out_c.has_string_literal( '%s: %d: ' )
		assert self.out_c.has_string_literal( '%s: %s' )
		#assert self.out_c.has_string_literal( '%s: not found' )
		assert self.out_c.has_string_literal( '%s:%s:%s:%s:%s:%s:%s:%s' )
		assert self.out_c.has_string_literal( '%s\\n\\nNo help available.\\n\\n' )
		#assert self.out_c.has_string_literal( '%s\\n\\nUsage: %s %s\\n\\n' )
		assert self.out_c.has_string_literal( '%s\\n\\nUsage: busybox [function] [arguments]...\\n   or: [function] [arguments]...\\n\\n\\tBusyBox is a multi-call binary that combines many common Unix\\n\\tutilities into a single executable.  Most people will create a\\n\\tlink to busybox for each function they wish to use, and BusyBox\\n\\twill act like whatever it was invoked as.\\n\\nCurrently defined functions:\\n' )
		assert self.out_c.has_string_literal( '*** error recvmsg len=%d\\n' )
		assert self.out_c.has_string_literal( '-- MARK --' )
		assert self.out_c.has_string_literal( '--help' )
		#assert self.out_c.has_string_literal( '-c' )
		assert self.out_c.has_string_literal( '-c requires an argument' )
		assert self.out_c.has_string_literal( '-q' )
		#assert self.out_c.has_string_literal( '.' )
		#assert self.out_c.has_string_literal( '/' )
		assert self.out_c.has_string_literal( '/bin/mount -t proc proc /proc' )
		assert self.out_c.has_string_literal( '-/bin/sh' )
		assert self.out_c.has_string_literal( '/bin/umount -a -r' )
		assert self.out_c.has_string_literal( '/dev/console' )
		assert self.out_c.has_string_literal( '/dev/null' )
		assert self.out_c.has_string_literal( '/dev/tty2' )
		assert self.out_c.has_string_literal( '/dev/tty3' )
		assert self.out_c.has_string_literal( '/dev/tty4' )
		assert self.out_c.has_string_literal( '/etc/init.d/rcS' )
		assert self.out_c.has_string_literal( '/etc/inittab' )
		assert self.out_c.has_string_literal( '/etc/profile' )
		assert self.out_c.has_string_literal( '/proc' )
		assert self.out_c.has_string_literal( '/proc/net/dev' )
		assert self.out_c.has_string_literal( '/proc/net/ipv6_route' )
		assert self.out_c.has_string_literal( '/proc/net/route' )
		assert self.out_c.has_string_literal( '/proc/net/vlan/config' )
		assert self.out_c.has_string_literal( '/sbin/init' )
		assert self.out_c.has_string_literal( '/sbin/reboot' )
		assert self.out_c.has_string_literal( '/sbin/swapoff -a' )
		assert self.out_c.has_string_literal( '/sbin/swapon -a' )
		assert self.out_c.has_string_literal( 'PATH=/usr/local/bin:/usr/bin:/sbin:/bin' )
		assert self.out_c.has_string_literal( '/var/log/log' )
		assert self.out_c.has_string_literal( '0' )
		#assert self.out_c.has_string_literal( '1k-blocks' )
		#assert self.out_c.has_string_literal( '<%d>' )
		assert self.out_c.has_string_literal( '<=' )
		assert self.out_c.has_string_literal( '==' )
		assert self.out_c.has_string_literal( '>=' )
		assert self.out_c.has_string_literal( 'ALLMULTI ' )
		assert self.out_c.has_string_literal( 'Allocating %d bytes for flash image.\\n' )
		assert self.out_c.has_string_literal( 'BCM96345  started: BusyBox v1.00 (2011.06.09-11:20+0000)' )
		assert self.out_c.has_string_literal( 'BROADCAST ' )
		assert self.out_c.has_string_literal( 'Bad fd number' )
		#assert self.out_c.has_string_literal( 'Bad for loop variable' )
		assert self.out_c.has_string_literal( 'Bad function name' )
		#assert self.out_c.has_string_literal( 'Bad substitution' )
		#assert self.out_c.has_string_literal( 'Buffer already allocated just grab the semaphore?' )
		assert self.out_c.has_string_literal( "Bummer, can't open %s" )
		assert self.out_c.has_string_literal( "Bummer, could not run '%s': %m" )
		assert self.out_c.has_string_literal( 'CDUP' )
		assert self.out_c.has_string_literal( "Can't fork!" )
		assert self.out_c.has_string_literal( "Can't open %s" )
		assert self.out_c.has_string_literal( "Can't open /proc" )
		assert self.out_c.has_string_literal( 'Cnoclobber' )
		assert self.out_c.has_string_literal( 'Connecting to %s[%s]:%d\\n' )
		#assert self.out_c.has_string_literal( 'Connection: close\\r\\n\\r\\n' )
		assert self.out_c.has_string_literal( 'DEBUG ' )
		assert self.out_c.has_string_literal( 'Destination' )
		assert self.out_c.has_string_literal( 'Directory nonexistent' )
		assert self.out_c.has_string_literal( 'ENV' )
		assert self.out_c.has_string_literal( 'EOF in backquote substitution' )
		assert self.out_c.has_string_literal( 'EXIT' )
		assert self.out_c.has_string_literal( 'Error checking free memory' )
		assert self.out_c.has_string_literal( 'Exiting Syslogd!' )
		#assert self.out_c.has_string_literal( 'Filesystem%11s%-15sUsed Available Use%% Mounted on\\n' )
		assert self.out_c.has_string_literal( 'HOME' )
		assert self.out_c.has_string_literal( 'HWaddr %s  ' )
		assert self.out_c.has_string_literal( 'Iignoreeof' )
		assert self.out_c.has_string_literal( 'Illegal eof marker for << redirection' )
		assert self.out_c.has_string_literal( 'Illegal mode: %s' )
		assert self.out_c.has_string_literal( 'Illegal number: %s' )
		assert self.out_c.has_string_literal( 'Illegal option -%c' )
		#assert self.out_c.has_string_literal( 'Illegal option -o %s' )
		assert self.out_c.has_string_literal( 'Kernel IP routing table\\nDestination     Gateway         Genmask         Flags %s Iface\\n' )
		assert self.out_c.has_string_literal( 'Kernel IPv6 routing table\\n%-44s%-40sFlags Metric Ref    Use Iface\\n' )
		assert self.out_c.has_string_literal( 'LOOPBACK ' )
		assert self.out_c.has_string_literal( 'MASTER ' )
		assert self.out_c.has_string_literal( 'MULTICAST ' )
		assert self.out_c.has_string_literal( 'Memory allocation failure' )
		#assert self.out_c.has_string_literal( "Missing '))'" )
		#assert self.out_c.has_string_literal( "Missing '}'" )
		assert self.out_c.has_string_literal( 'missing ]' )
		assert self.out_c.has_string_literal( 'NOARP ' )
		assert self.out_c.has_string_literal( 'NOTRAILERS ' )
		#assert self.out_c.has_string_literal( 'Next Hop' )
		assert self.out_c.has_string_literal( 'No arg for -%c option' )
		assert self.out_c.has_string_literal( 'No such file' )
		assert self.out_c.has_string_literal( 'Not enough memory error.  Could not allocate %u bytes.' )
		assert self.out_c.has_string_literal( 'OLDPWD' )
		assert self.out_c.has_string_literal( "Only support 'bin' mode. Type 'bin' at tftp client" )
		assert self.out_c.has_string_literal( 'Out of file descriptors' )
		#assert self.out_c.has_string_literal( 'PASS ' )
		#assert self.out_c.has_string_literal( 'PASV' )
		assert self.out_c.has_string_literal( 'PATH=/usr/bin:/bin:/usr/sbin:/sbin' )
		assert self.out_c.has_string_literal( 'PING %s (%s): %d data bytes\\n' )
		assert self.out_c.has_string_literal( 'POINTOPOINT ' )
		assert self.out_c.has_string_literal( 'PPID' )
		assert self.out_c.has_string_literal( 'PROMISC ' )
		assert self.out_c.has_string_literal( 'PWD' )
		assert self.out_c.has_string_literal( 'Pipe call failed' )
		assert self.out_c.has_string_literal( 'Please stand by while rebooting the system.' )
		assert self.out_c.has_string_literal( 'QUIT' )
		assert self.out_c.has_string_literal( 'REST %ld' )
		assert self.out_c.has_string_literal( 'RETR /' )
		assert self.out_c.has_string_literal( 'RUNNING ' )
		assert self.out_c.has_string_literal( 'Range: bytes=%ld-\\r\\n' )
		assert self.out_c.has_string_literal( 'Reloading /etc/inittab' )
		assert self.out_c.has_string_literal( 'SHELL=/bin/sh' )
		assert self.out_c.has_string_literal( 'SIZE /' )
		assert self.out_c.has_string_literal( 'SLAVE ' )
		assert self.out_c.has_string_literal( 'Sending SIGKILL to all processes.' )
		assert self.out_c.has_string_literal( 'Sending SIGTERM to all processes.' )
		assert self.out_c.has_string_literal( 'Shell exited due to idle timeout (%d seconds)\\n' )
		assert self.out_c.has_string_literal( "Starting pid %d, console %s: '%s'" )
		assert self.out_c.has_string_literal( 'Syntax error: %s' )
		assert self.out_c.has_string_literal( 'TMOUT' )
		assert self.out_c.has_string_literal( 'TX packets:%Lu errors:%lu dropped:%lu overruns:%lu carrier:%lu\\n' )
		assert self.out_c.has_string_literal( 'TYPE I' )
		#assert self.out_c.has_string_literal( 'TZ=UTC0' )
		assert self.out_c.has_string_literal( 'The system is going down NOW !!' )
		assert self.out_c.has_string_literal( 'The system is halted. Press Reset or turn off power' )
		assert self.out_c.has_string_literal( 'UP ' )
		assert self.out_c.has_string_literal( 'USER ' )
		assert self.out_c.has_string_literal( 'USER=root' )
		assert self.out_c.has_string_literal( 'Unable to connect to remote host (%s)' )
		assert self.out_c.has_string_literal( 'Warning: cannot open %s. Limited output.' )
		assert self.out_c.has_string_literal( 'Write Error' )
		assert self.out_c.has_string_literal( 'X bytes:%Lu (%Lu.%u %sB)%s' )
		#assert self.out_c.has_string_literal( '[' )
		assert self.out_c.has_string_literal( '[NONE SET]' )
		assert self.out_c.has_string_literal( '\\n()&|;' )
		assert self.out_c.has_string_literal( '\\n--- %s ping statistics ---\\n' )
		#assert self.out_c.has_string_literal( '\\nBuilt-in commands:\\n-------------------\\n' )
		assert self.out_c.has_string_literal( '\\nPlease press Enter to activate this console. ' )
		#assert self.out_c.has_string_literal( "\\n\\nBusyBox v1.00 (2011.06.09-11:20+0000) Built-in shell (ash)\\nEnter 'help' for a list of built-in commands.\\n\\n" )
		assert self.out_c.has_string_literal( '\\t\\n !\\"$&\'()*-/:;<=>?[\\\\]`|}~' )
		assert self.out_c.has_string_literal( "`%s' and `%s' are the same file" )
		assert self.out_c.has_string_literal( 'aallexport' )
		assert self.out_c.has_string_literal( 'arg count' )
		assert self.out_c.has_string_literal( 'argument expected' )
		assert self.out_c.has_string_literal( 'backed up config file to %s (%d bytes)\\n' )
		assert self.out_c.has_string_literal( 'bb_xasprintf' )
		assert self.out_c.has_string_literal( 'bb_xstrndup bug' )
		assert self.out_c.has_string_literal( 'bnotify' )
		assert self.out_c.has_string_literal( 'builtin' )
		assert self.out_c.has_string_literal( 'busybox' )
		assert self.out_c.has_string_literal( "can't shift that many" )
		assert self.out_c.has_string_literal( 'can`t create raw socket' )
		#assert self.out_c.has_string_literal( 'cannot create %s: %s' )
		assert self.out_c.has_string_literal( 'cannot get system information' )
		assert self.out_c.has_string_literal( 'cannot open %s: %s' )
		assert self.out_c.has_string_literal( 'cannot open socket ' )
		assert self.out_c.has_string_literal( 'closing paren expected' )
		#assert self.out_c.has_string_literal( 'date' )
		assert self.out_c.has_string_literal( 'default' )
		assert self.out_c.has_string_literal( "device '%s' does not exist." )
		assert self.out_c.has_string_literal( 'eerrexit' )
		#assert self.out_c.has_string_literal( 'error setting limit (%m)' )
		assert self.out_c.has_string_literal( 'exec ' )
		assert self.out_c.has_string_literal( 'expression expected' )
		assert self.out_c.has_string_literal( 'fatal: %s\\n' )
		assert self.out_c.has_string_literal( 'fdopen()' )
		assert self.out_c.has_string_literal( 'fnoglob' )
		assert self.out_c.has_string_literal( 'ftp' )
		assert self.out_c.has_string_literal( 'ftp://' )
		assert self.out_c.has_string_literal( 'func' )
		assert self.out_c.has_string_literal( 'getaddrinfo: %s: %d' )
		#assert self.out_c.has_string_literal( 'hours' )
		assert self.out_c.has_string_literal( 'http' )
		assert self.out_c.has_string_literal( 'http://' )
		assert self.out_c.has_string_literal( 'ignoring all arguments' )
		assert self.out_c.has_string_literal( 'iinteractive' )
		assert self.out_c.has_string_literal( 'index.html' )
		assert self.out_c.has_string_literal( 'inet' )
		assert self.out_c.has_string_literal( 'init' )
		assert self.out_c.has_string_literal( 'init started:  %s' )
		assert self.out_c.has_string_literal( "invalid mode `%s'" )
		assert self.out_c.has_string_literal( 'invalid mode: %s' )
		assert self.out_c.has_string_literal( 'ipv6-icmp' )
		assert self.out_c.has_string_literal( 'killall' )
		assert self.out_c.has_string_literal( 'length' )
		assert self.out_c.has_string_literal( 'linuxrc' )
		#assert self.out_c.has_string_literal( 'm:' )
		assert self.out_c.has_string_literal( 'm:p' )
		#assert self.out_c.has_string_literal( 'main command loop: cmd_get=%d cmd_put=%d remotefile=%s' )
		assert self.out_c.has_string_literal( 'missing ]' )
		assert self.out_c.has_string_literal( 'mmonitor' )
		#assert self.out_c.has_string_literal( 'mypid=%d glbUploadType=%c' )
		#assert self.out_c.has_string_literal( 'neE' )
		assert self.out_c.has_string_literal( 'nnoexec' )
		assert self.out_c.has_string_literal( 'not a tty' )
		assert self.out_c.has_string_literal( 'not an http or ftp url: %s' )
		assert self.out_c.has_string_literal( 'not found' )
		assert self.out_c.has_string_literal( 'octet' )
		assert self.out_c.has_string_literal( 'off' )
		assert self.out_c.has_string_literal( 'on' )
		assert self.out_c.has_string_literal( "overwrite `%s'? " )
		#assert self.out_c.has_string_literal( 'parameter not set' )
		assert self.out_c.has_string_literal( 'pcub' )
		assert self.out_c.has_string_literal( 'permission denied. (are you root?)' )
		assert self.out_c.has_string_literal( 'qquietprofile' )
		assert self.out_c.has_string_literal( 'quote' )
		assert self.out_c.has_string_literal( 'r' )
		assert self.out_c.has_string_literal( 'r+' )
		#assert self.out_c.has_string_literal( 'round-trip min/avg/max = %lu.%lu/%lu.%lu/%lu.%lu ms\\n' )
		assert self.out_c.has_string_literal( 'rwxSTst' )
		#assert self.out_c.has_string_literal( 'seconds' )
		#assert self.out_c.has_string_literal( 'sending config to remote file %s' )
		assert self.out_c.has_string_literal( 'server returned error %d: %s' )
		assert self.out_c.has_string_literal( 'socket' )
		assert self.out_c.has_string_literal( 'sstdin' )
		assert self.out_c.has_string_literal( 'tcp' )
		assert self.out_c.has_string_literal( 'tfp' )
		assert self.out_c.has_string_literal( 'tftpd_ack send' )
		assert self.out_c.has_string_literal( "unable to close `%s'" )
		assert self.out_c.has_string_literal( "unable to open directory `%s'" )
		assert self.out_c.has_string_literal( "unable to preserve ownership of `%s'" )
		assert self.out_c.has_string_literal( "unable to preserve permissions of `%s'" )
		assert self.out_c.has_string_literal( "unable to preserve times of `%s'" )
		assert self.out_c.has_string_literal( "unable to stat `%s'" )
		assert self.out_c.has_string_literal( 'unknown address type; only AF_INET is currently supported.' )
		assert self.out_c.has_string_literal( 'unknown operand' )
		assert self.out_c.has_string_literal( 'unlimited\\n' )
		assert self.out_c.has_string_literal( 'unounset' )
		assert self.out_c.has_string_literal( 'urrently defined functions:\\n' )
		assert self.out_c.has_string_literal( 'vf' )
		assert self.out_c.has_string_literal( 'vverbose' )
		assert self.out_c.has_string_literal( "warning: unportable BRE: `%s': using `^' as the first character\\nof a basic regular expression is not portable; it is being ignored" )
		assert self.out_c.has_string_literal( 'xxtrace' )

class libndmComponents(Test):

	settings = TestSettings(
		input='libndmComponents.so',
		args='-k'
	)

	def test_for_some_functions(self):
		assert self.out_c.has_func( '_ftext' ) # entry_point
		assert self.out_c.has_func( '_ZNK7Command7RequestixERK7CString' )
		assert self.out_c.has_func( '_ZN4HTTP2IO8DirectFd8WriteAllEPKvj' )
		assert self.out_c.has_func( '_ZN3Xml8Document12AllocateNodeENS_4Node5TypeTERK7CStringS5_' )
		assert self.out_c.has_func( '_ZN4HTTP2IO8DirectFd7ReadAllEPvj' )
		assert self.out_c.has_func( '_ZN5Event8ProgressC1ERK7CStringm7RebootT' )
		assert self.out_c.has_func( '_ZN6Thread9SetStatusEP6Status' )
		assert self.out_c.has_func( '_ZN9StatusLogC1E7ReturnTN3Log6LevelTEPKcS4_P6Status' )
		assert self.out_c.has_func( '_ZNK3Xml4Node9FirstNodeERK7CString' )
		assert self.out_c.has_func( '_ZNK7Command4Base12ConfiguratorEv' )
		assert self.out_c.has_func( '_ZNK9StringMap4SizeEv' )

class x86_elf_60b7c56f174faf4b617af4d724fda88d(Test):

	settings = TestSettings(
		input='x86-elf-60b7c56f174faf4b617af4d724fda88d',
		args='-k'
	)

	def test_for_all_functions(self):
		assert self.out_c.has_func( 'function_8048074' )
		assert self.out_c.has_func( 'entry_point' )
		assert self.out_c.has_func( 'function_8048115' )
		assert self.out_c.has_func( 'function_8048122' )
		assert self.out_c.has_func( 'function_8048185' )
