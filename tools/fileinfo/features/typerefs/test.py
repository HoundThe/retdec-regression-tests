from regression_tests import *

class TestTypeRefNested(Test):
    settings = TestSettings(
        tool='fileinfo',
        input='typeref_hash_nested',
        args='--verbose --json'
    )

    def test_correctly_analyzes_typerefs_nested(self):
        assert self.fileinfo.succeeded

        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][0]['libraryName'], 'System.Runtime')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][0]['name'], 'CompilationRelaxationsAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][0]['nameSpace'], 'System.Runtime.CompilerServices')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][1]['libraryName'], 'System.Runtime')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][1]['name'], 'RuntimeCompatibilityAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][1]['nameSpace'], 'System.Runtime.CompilerServices')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][2]['libraryName'], 'System.Runtime')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][2]['name'], 'DebuggableAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][2]['nameSpace'], 'System.Diagnostics')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][3]['libraryName'], 'System.Runtime')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][3]['name'], 'DebuggingModes.DebuggableAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][3]['nameSpace'], 'System.Diagnostics')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][4]['libraryName'], 'System.Runtime')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][4]['name'], 'TargetFrameworkAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][4]['nameSpace'], 'System.Runtime.Versioning')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][5]['libraryName'], 'System.Runtime')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][5]['name'], 'AssemblyCompanyAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][5]['nameSpace'], 'System.Reflection')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][6]['libraryName'], 'System.Runtime')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][6]['name'], 'AssemblyConfigurationAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][6]['nameSpace'], 'System.Reflection')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][7]['libraryName'], 'System.Runtime')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][7]['name'], 'AssemblyFileVersionAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][7]['nameSpace'], 'System.Reflection')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][8]['libraryName'], 'System.Runtime')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][8]['name'], 'AssemblyInformationalVersionAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][8]['nameSpace'], 'System.Reflection')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][9]['libraryName'], 'System.Runtime')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][9]['name'], 'AssemblyProductAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][9]['nameSpace'], 'System.Reflection')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][10]['libraryName'], 'System.Runtime')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][10]['name'], 'AssemblyTitleAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][10]['nameSpace'], 'System.Reflection')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][11]['libraryName'], 'System.Runtime')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][11]['name'], 'Object')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][11]['nameSpace'], 'System')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][12]['libraryName'], 'CustomLibrary')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][12]['name'], 'CustomClass1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][12]['nameSpace'], 'CustomLibrary')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][13]['libraryName'], 'CustomLibrary')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][13]['name'], 'CustomClass2')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][13]['nameSpace'], 'CustomLibrary')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][14]['libraryName'], 'CustomLibrary')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][14]['name'], 'CustomSubClassA.CustomClass1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][14]['nameSpace'], 'CustomLibrary')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][15]['libraryName'], 'CustomLibrary')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][15]['name'], 'CustomSubClassB.CustomClass2')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][15]['nameSpace'], 'CustomLibrary')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][16]['libraryName'], 'CustomLibrary')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][16]['name'], 'CustomSubSubClassX.CustomSubClassB.CustomClass2')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][16]['nameSpace'], 'CustomLibrary')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][17]['libraryName'], 'System.Console')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][17]['name'], 'Console')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][17]['nameSpace'], 'System')

    def test_correctly_computes_typeref_hash(self):
        assert self.fileinfo.succeeded

        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['crc32'], '2553516c')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['md5'], '5742603226df6e720f055413ba924c2c')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['sha256'], 'c40e879174d85aaf426217ab5e39de04214245636550b82051a759d2946f15db')

# https://github.com/avast/retdec/issues/363
# Test typeref hashes for .NET files
# Default VS binary
class TestTypeRefHashDefault(Test):
    settings = TestSettings(
        tool='fileinfo',
        input='typeref_hash_default',
        args='--verbose --json'
    )

    def test_correctly_computes_typeref_hash(self):
        assert self.fileinfo.succeeded

        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['crc32'], 'bb390cc9')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['md5'], '93b7f964c87a94b07d1f6171f0b7d7c1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['sha256'], '37a37a2d4cc651a9b6cf54da949cbb6c89fc1e6e9991628087741d51666c7f1b')

# VS nested class binary with cyclic referencing
class TestTypeRefHashNestedInfinite(Test):
    settings = TestSettings(
        tool='fileinfo',
        input='typeref_hash_nested_infinite',
        args='--verbose --json'
    )

    def test_correctly_computes_typeref_hash(self):
        assert self.fileinfo.succeeded

        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['crc32'], '0c472e09')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['md5'], 'f8a9907a02d8a1bede13aa8dfc005269')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['sha256'], '9b327187b627a940bfe8645ca3df66500906f1822cfe08e279cbf23a7dd23660')

class TestTypeRefCorruptedAssemblyRefTable(Test):
    settings = TestSettings(
        tool='fileinfo',
        input='057cc3829d8eba8aebc3043eea40af5b05e1eb229012136b43134728e1b46d63',
        args='--verbose --json'
    )

    def test_correctly_parses_typeref_info(self):
        assert self.fileinfo.succeeded

        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['crc32'], '57e1972c')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['md5'], '84321e6febcdb37d337633ad56f28025')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['sha256'], 'f226ba802a629e8edfdaa08e199e11ead5cd0b0b7d461b725678a11a71dec809')

    def test_correctly_parses_typerefs(self):
        assert self.fileinfo.succeeded

        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][0]['name'], 'indowsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][1]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][2]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][2]['nameSpace'], 'Void')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][3]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][3]['nameSpace'], 'Int32')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][4]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][4]['nameSpace'], 'Boolean')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][5]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][5]['nameSpace'], 'RuntimeCompatibilityAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][6]['name'], 'axationsAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][6]['nameSpace'], 'DebuggingModes')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][7]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][8]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][8]['nameSpace'], 'String')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][9]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][9]['nameSpace'], 'AssemblyDescriptionAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][10]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][10]['nameSpace'], 'AssemblyCompanyAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][11]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][11]['nameSpace'], 'AssemblyProductAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][12]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][12]['nameSpace'], 'AssemblyTrademarkAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][13]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][13]['nameSpace'], 'lyDescriptionAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][14]['name'], 'wsApp1.wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][14]['nameSpace'], 'MD5CryptoServiceProvider')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][15]['name'], 'wsApp1.wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][15]['nameSpace'], 'MD5CryptoServiceProvider')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][16]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][16]['nameSpace'], 'SuppressIldasmAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][17]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][17]['nameSpace'], 'AssemblyDelaySignAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][18]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][18]['nameSpace'], 'AssemblyConfigurationAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][19]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][19]['nameSpace'], 'aySignAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][20]['name'], 'p1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][20]['nameSpace'], 'WindowsFormsApplicationBase')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][21]['name'], 'p1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][21]['nameSpace'], 'Computer')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][22]['name'], 'ompilationRelaxationsAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][22]['nameSpace'], 'ApplicationSettingsBase')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][23]['name'], 'lationRelaxationsAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][23]['nameSpace'], 'Form')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][24]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][24]['nameSpace'], 'ValueType')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][25]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][25]['nameSpace'], 'Enum')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][26]['name'], 'onRelaxationsAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][26]['nameSpace'], 'Int32')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][27]['name'], 'lationRelaxationsAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][27]['nameSpace'], 'Application')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][28]['name'], 'onRelaxationsAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][28]['nameSpace'], 'Boolean')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][29]['name'], 'onRelaxationsAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][29]['nameSpace'], 'Object')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][30]['name'], 'p1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][30]['nameSpace'], 'AuthenticationMode')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][31]['name'], 'p1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][31]['nameSpace'], 'ShutdownMode')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][32]['name'], 'p1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][32]['nameSpace'], 'User')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][33]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][33]['nameSpace'], 'Hashtable')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][34]['name'], 'lationRelaxationsAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][34]['nameSpace'], 'Control')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][35]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][35]['nameSpace'], 'Type')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][36]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][36]['nameSpace'], 'RuntimeTypeHandle')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][37]['name'], 'p1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][37]['nameSpace'], 'Utils')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][38]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][38]['nameSpace'], 'InvalidOperationException')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][39]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][39]['nameSpace'], 'Activator')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][40]['name'], 'p1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][40]['nameSpace'], 'ProjectData')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][41]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][41]['nameSpace'], 'Exception')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][42]['name'], 'ompilationRelaxationsAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][42]['nameSpace'], 'Component')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][43]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][43]['nameSpace'], 'RuntimeHelpers')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][44]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][44]['nameSpace'], 'ResourceManager')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][45]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][45]['nameSpace'], 'CultureInfo')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][46]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][46]['nameSpace'], 'EventArgs')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][47]['name'], 'p1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][47]['nameSpace'], 'ShutdownEventHandler')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][48]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][48]['nameSpace'], 'IntPtr')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][49]['name'], 'ompilationRelaxationsAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][49]['nameSpace'], 'SettingsBase')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][50]['name'], 'p1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][50]['nameSpace'], 'ObjectFlowControl')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][51]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][51]['nameSpace'], 'Monitor')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][52]['name'], 'ompilationRelaxationsAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][52]['nameSpace'], 'IContainer')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][53]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][53]['nameSpace'], 'EventHandler')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][54]['name'], 'laxationsAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][54]['nameSpace'], 'Size')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][55]['name'], 'laxationsAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][55]['nameSpace'], 'Point')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][56]['name'], 'laxationsAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][56]['nameSpace'], 'SizeF')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][57]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][57]['nameSpace'], 'Single')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][58]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][58]['nameSpace'], 'Double')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][59]['name'], 'p1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][59]['nameSpace'], 'Strings')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][60]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][60]['nameSpace'], 'AppDomain')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][61]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][61]['nameSpace'], 'Convert')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][62]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][62]['nameSpace'], 'Byte')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][63]['name'], 'p1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][63]['nameSpace'], 'NewLateBinding')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][64]['name'], 'p1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][64]['nameSpace'], 'Conversions')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][65]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][65]['nameSpace'], 'IDisposable')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][66]['name'], 'lationRelaxationsAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][66]['nameSpace'], 'ButtonBase')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][67]['name'], 'lationRelaxationsAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][67]['nameSpace'], 'ContainerControl')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][68]['name'], 'lationRelaxationsAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][68]['nameSpace'], 'AutoScaleMode')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][69]['name'], 'bute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][69]['nameSpace'], 'ControlCollection')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][70]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][70]['nameSpace'], 'FieldInfo')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][71]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][71]['nameSpace'], 'MethodInfo')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][72]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][72]['nameSpace'], 'Module')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][73]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][73]['nameSpace'], 'MemberInfo')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][74]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][74]['nameSpace'], 'MethodBase')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][75]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][75]['nameSpace'], 'Delegate')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][76]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][76]['nameSpace'], 'IAsyncResult')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][77]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][77]['nameSpace'], 'AsyncCallback')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][78]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][78]['nameSpace'], 'Int64')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][79]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][79]['nameSpace'], 'UInt32')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][80]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][80]['nameSpace'], 'Array')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][81]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][81]['nameSpace'], 'RuntimeFieldHandle')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][82]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][82]['nameSpace'], 'SortedList')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][83]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][83]['nameSpace'], 'UInt64')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][84]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][84]['nameSpace'], 'BitConverter')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][85]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][85]['nameSpace'], 'UInt16')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][86]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][86]['nameSpace'], 'SymmetricAlgorithm')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][87]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][87]['nameSpace'], 'ObjectHandle')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][88]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][88]['nameSpace'], 'RijndaelManaged')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][89]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][89]['nameSpace'], 'MD5CryptoServiceProvider')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][90]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][90]['nameSpace'], 'HashAlgorithm')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][91]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][91]['nameSpace'], 'MemoryStream')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][92]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][92]['nameSpace'], 'ICryptoTransform')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][93]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][93]['nameSpace'], 'BinaryReader')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][94]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][94]['nameSpace'], 'Stream')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][95]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][95]['nameSpace'], 'Encoding')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][96]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][96]['nameSpace'], 'Marshal')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][97]['name'], 'wsApp1.wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][97]['nameSpace'], 'MD5CryptoServiceProvider')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][98]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][98]['nameSpace'], 'PropertyInfo')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][99]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][99]['nameSpace'], 'FileStream')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][100]['name'], 'lationRelaxationsAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][100]['nameSpace'], 'DialogResult')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][101]['name'], 'lationRelaxationsAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][101]['nameSpace'], 'MessageBox')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][102]['name'], 'ompilationRelaxationsAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][102]['nameSpace'], 'GeneratedCodeAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][103]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][103]['nameSpace'], 'DebuggerHiddenAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][104]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][104]['nameSpace'], 'DebuggerStepThroughAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][105]['name'], 'p1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][105]['nameSpace'], 'StandardModuleAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][106]['name'], 'p1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][106]['nameSpace'], 'HideModuleNameAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][107]['name'], 'ompilationRelaxationsAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][107]['nameSpace'], 'HelpKeywordAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][108]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][108]['nameSpace'], 'DebuggerNonUserCodeAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][109]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][109]['nameSpace'], 'CompilerGeneratedAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][110]['name'], 'p1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][110]['nameSpace'], 'DesignerGeneratedAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][111]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][111]['nameSpace'], 'DebuggerBrowsableAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][112]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][112]['nameSpace'], 'DebuggerBrowsableState')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][113]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][113]['nameSpace'], 'AccessedThroughPropertyAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][114]['name'], 'p1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][114]['nameSpace'], 'MyGroupCollectionAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][115]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][115]['nameSpace'], 'ThreadStaticAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][116]['name'], 'ttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][117]['name'], 'wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][117]['nameSpace'], 'UnmanagedFunctionPointerAttribute')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][118]['name'], 'wsApp1.wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][118]['nameSpace'], 'MD5CryptoServiceProvider')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][119]['name'], 'wsApp1.wsApp1')
        self.assertEqual(self.fileinfo.output['dotnetInfo']['typeRefTable']['types'][119]['nameSpace'], 'MD5CryptoServiceProvider')

