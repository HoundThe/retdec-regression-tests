from regression_tests import *

class PeTest(Test):
    settings = TestSettings(
        tool='fileinfo',
        input='aiff.dll',
        args='--verbose --json'
    )

    def test_correctly_analyzes_imports_and_exports(self):
        assert self.fileinfo.succeeded

        self.assertEqual(self.fileinfo.output['architecture'], 'x86')
        self.assertEqual(self.fileinfo.output['declaredNumberOfDataDirectories'], '16')
        self.assertEqual(self.fileinfo.output['endianness'], 'Little endian')
        self.assertEqual(self.fileinfo.output['fileFormat'], 'PE')
        self.assertEqual(self.fileinfo.output['fileStatus'], 'PE32')
        self.assertEqual(self.fileinfo.output['fileType'], 'DLL')
        self.assertEqual(self.fileinfo.output['importTable']['numberOfImports'], '7')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][0]['index'], '0')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][1]['index'], '1')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][2]['index'], '2')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][3]['index'], '3')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][4]['index'], '4')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][5]['index'], '5')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][6]['index'], '6')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][0]['name'], 'LoadLibraryA')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][1]['name'], 'GetProcAddress')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][2]['name'], 'VirtualProtect')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][3]['name'], 'VirtualAlloc')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][4]['name'], 'VirtualFree')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][5]['name'], '??1CSampleRateConverter2@@QAE@XZ')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][6]['name'], 'free')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][0]['libraryName'], 'KERNEL32.DLL')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][1]['libraryName'], 'KERNEL32.DLL')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][2]['libraryName'], 'KERNEL32.DLL')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][3]['libraryName'], 'KERNEL32.DLL')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][4]['libraryName'], 'KERNEL32.DLL')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][5]['libraryName'], 'acdbase.dll')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][6]['libraryName'], 'MSVCR90.dll')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][0]['address'], '0x1000f594')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][1]['address'], '0x1000f598')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][2]['address'], '0x1000f59c')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][3]['address'], '0x1000f5a0')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][4]['address'], '0x1000f5a4')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][5]['address'], '0x1000f5ac')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][6]['address'], '0x1000f5b4')
        self.assertEqual(self.fileinfo.output['exportTable']['numberOfExports'], '4')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][0]['index'], '0')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][1]['index'], '1')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][2]['index'], '2')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][3]['index'], '3')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][0]['name'], 'ACDX_Compress')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][1]['name'], 'ACDX_DeinitCompress')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][2]['name'], 'ACDX_InitCompress')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][3]['name'], 'ACDX_Initialize')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][0]['address'], '0x100012e0')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][1]['address'], '0x10001620')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][2]['address'], '0x10001430')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][3]['address'], '0x100012d0')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][0]['ordinalNumber'], '1')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][1]['ordinalNumber'], '2')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][2]['ordinalNumber'], '3')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][3]['ordinalNumber'], '4')

class ElfTest(Test):
    settings = TestSettings(
        tool='fileinfo',
        input='language.elf',
        args='--verbose --json'
    )

    def test_correctly_analyzes_imports_and_exports(self):
        assert self.fileinfo.succeeded

        self.assertEqual(self.fileinfo.output['architecture'], 'ARM')
        self.assertEqual(self.fileinfo.output['declaredNumberOfSections'], '27')
        self.assertEqual(self.fileinfo.output['declaredNumberOfSegments'], '8')
        self.assertEqual(self.fileinfo.output['endianness'], 'Little endian')
        self.assertEqual(self.fileinfo.output['fileFormat'], 'ELF')
        self.assertEqual(self.fileinfo.output['fileClass'], '32-bit')
        self.assertEqual(self.fileinfo.output['fileType'], 'Executable file')
        self.assertEqual(self.fileinfo.output['fileFlags']['value'], '00000101000000000000000000000010')
        self.assertEqual(self.fileinfo.output['fileVersion'], '1')
        self.assertEqual(self.fileinfo.output['overlay']['offset'], '0x2ecc')
        self.assertEqual(self.fileinfo.output['overlay']['size'], '0x57')
        self.assertEqual(self.fileinfo.output['numberOfBitsInOneWord'], '32')
        self.assertEqual(self.fileinfo.output['tableOfSectionsOffset'], '0x2a94')
        self.assertEqual(self.fileinfo.output['tableOfSegmentsOffset'], '0x34')
        self.assertEqual(self.fileinfo.output['symbolTables'][0]['name'], '.dynsym')
        self.assertEqual(self.fileinfo.output['symbolTables'][0]['numberOfSymbols'], '33')
        self.assertEqual(self.fileinfo.output['importTable']['numberOfImports'], '24')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][0]['index'], '0')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][1]['index'], '1')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][2]['index'], '2')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][3]['index'], '3')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][4]['index'], '4')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][5]['index'], '5')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][6]['index'], '6')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][7]['index'], '7')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][8]['index'], '8')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][9]['index'], '9')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][10]['index'], '10')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][11]['index'], '11')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][12]['index'], '12')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][13]['index'], '13')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][14]['index'], '14')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][15]['index'], '15')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][16]['index'], '16')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][17]['index'], '17')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][18]['index'], '18')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][19]['index'], '19')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][20]['index'], '20')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][21]['index'], '21')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][22]['index'], '22')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][23]['index'], '23')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][0]['name'], 'strcmp')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][1]['name'], 'fopen')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][2]['name'], 'fflush')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][3]['name'], 'ferror')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][4]['name'], '_IO_getc')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][5]['name'], 'ftell')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][6]['name'], 'realloc')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][7]['name'], '_IO_putc')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][8]['name'], 'fwrite')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][9]['name'], 'strcpy')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][10]['name'], 'malloc')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][11]['name'], '__libc_start_main')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][12]['name'], '__gmon_start__')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][13]['name'], '__gmon_start__')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][14]['name'], '__ctype_b_loc')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][15]['name'], 'exit')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][16]['name'], 'getopt')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][17]['name'], 'fprintf')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][18]['name'], 'ungetc')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][19]['name'], 'strncpy')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][20]['name'], 'fclose')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][21]['name'], 'fseek')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][22]['name'], 'strncmp')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][23]['name'], 'abort')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][0]['address'], '0x128bc')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][1]['address'], '0x128c0')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][2]['address'], '0x128c4')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][3]['address'], '0x128c8')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][4]['address'], '0x128cc')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][5]['address'], '0x128d0')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][6]['address'], '0x128d4')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][7]['address'], '0x128d8')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][8]['address'], '0x128dc')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][9]['address'], '0x128e0')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][10]['address'], '0x128e4')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][11]['address'], '0x128e8')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][12]['address'], '0x128ec')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][13]['address'], '0x12918')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][14]['address'], '0x128f0')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][15]['address'], '0x128f4')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][16]['address'], '0x128f8')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][17]['address'], '0x128fc')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][18]['address'], '0x12900')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][19]['address'], '0x12904')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][20]['address'], '0x12908')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][21]['address'], '0x1290c')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][22]['address'], '0x12910')
        self.assertEqual(self.fileinfo.output['importTable']['imports'][23]['address'], '0x12914')
        self.assertEqual(self.fileinfo.output['exportTable']['numberOfExports'], '4')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][0]['index'], '0')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][1]['index'], '1')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][2]['index'], '2')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][3]['index'], '3')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][0]['name'], 'optind')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][1]['name'], 'stderr')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][2]['name'], 'stdout')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][3]['name'], 'optarg')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][0]['address'], '0x12988')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][1]['address'], '0x12990')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][2]['address'], '0x12994')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][3]['address'], '0x12998')

class ExportByOrdinalTest(Test):
    settings = TestSettings(
        tool='fileinfo',
        input='export_ordinals.dll',
        args='--verbose --json'
    )

    def test_correctly_analyzes_exports(self):
        assert self.fileinfo.succeeded

        self.assertEqual(self.fileinfo.output['exportTable']['exports'][0]['ordinalNumber'], '111')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][100]['ordinalNumber'], '211')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][200]['ordinalNumber'], '311')
        self.assertEqual(self.fileinfo.output['exportTable']['exports'][300]['ordinalNumber'], '411')
